import pandas as pd

data = pd.read_csv('insurance.csv')

data.head()

data.tail()

data.shape

print('Number of rows',data.shape[0])
print('Number of Columns',data.shape[1])

data.info()

data.isnull()

data.isnull().sum()

data.describe()

data.describe(include ='all')

data.head()

data['sex'].unique()

data['sex']=data['sex'].map({'female':0,'male':1})

data.head()

data['smoker']=data['smoker'].map({'no':0,'yes':1})

data.head()

data['region'].unique()

data['region']=data['region'].map({'southwest':1,'southeast':2,'northwest':3,'northeast':4})

data.head()

data.columns

X= data.drop(['charges'], axis=1)

X

y = data['charges']

y

Train/test Split


from sklearn.model_selection import train_test_split

X_train, X_test,y_train,y_test= train_test_split(X,y,test_size=0.2, random_state=42)

X_train

y_train

Import Models

from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import GradientBoostingRegressor

Training model


lr = LinearRegression()
lr.fit(X_train,y_train)
svm = SVR()
svm.fit(X_train,y_train)
gr = GradientBoostingRegressor()
gr.fit(X_train,y_train)

y_pred1 = lr.predict(X_test)
y_pred2 = svm.predict(X_test)
y_pred3 = gr.predict(X_test)

df1= pd.DataFrame({'Actual':y_test,'lr':y_pred1,'svm':y_pred2,'gr':y_pred3})

df1

Compare Performance Visually

import matplotlib.pyplot as plt

plt.subplot(222)
plt.plot(df1['Actual'].iloc[0:11],label='Actual')
plt.plot(df1['lr'].iloc[0:11],label='Lr')
plt.legend()

plt.subplot(223)
plt.plot(df1['Actual'].iloc[0:11],label='Actual')
plt.plot(df1['svm'].iloc[0:11],label='svm')
plt.legend()

plt.subplot(224)
plt.plot(df1['Actual'].iloc[0:11],label='Actual')
plt.plot(df1['gr'].iloc[0:11],label='gr')
plt.legend()
plt.tight_layout()

Evaluating The Algorithm

from sklearn import metrics

score1=metrics.r2_score(y_test,y_pred1)
score2=metrics.r2_score(y_test,y_pred2)
score3=metrics.r2_score(y_test,y_pred3)

print(score1,score2,score3)

s1=metrics.mean_absolute_error(y_test,y_pred1)
s2=metrics.mean_absolute_error(y_test,y_pred2)
s3=metrics.mean_absolute_error(y_test,y_pred3)

print(s1,s2,s3)

Predict Charges for New Customer

data = {'age':35,
        'sex':0,
        'bmi':42.40,
        'children':3,
        'smoker':1,
        'region':4}

df = pd.DataFrame(data,index=[0])
df

new_pred= gr.predict(df)
print(new_pred)

Save model using Joblib

gr = GradientBoostingRegressor()
gr.fit(X,y)

import joblib

joblib.dump(gr,'model_joblib_gr')

model = joblib.load('model_joblib_gr')

model.predict(df)



